-- Get Equipment
local Modem = peripheral.wrap("back")
local peripheralNames = Modem.getNamesRemote()
local monitorNamePattern = "monitor"
local equipmentNamePattern = "furnace"
local generatorNamePattern = "generator"

local titleString = "Furnace"
local barColor = colors.gray

-- Function to wrap a peripheral based on its name pattern
local function wrapPeripheral(namePattern)
    for _, name in ipairs(peripheralNames) do
      if name:lower():find(namePattern:lower()) then
        local peripheral = peripheral.wrap(name)
        if peripheral == nil then
          print("Error wrapping peripheral: " .. name)
        else
          return peripheral
        end 
      end
    end
    print("Peripheral not found: " .. namePattern)
    return nil
end

local monitor = wrapPeripheral(monitorNamePattern)
local equipment = wrapPeripheral(equipmentNamePattern)
local generator = wrapPeripheral(generatorNamePattern)

local width, height = monitor.getSize() -- Get the size of the monitor
local status = "normal"
local percentage = 0 -- Your variable to track progress

-- Get Equipment
local Modem = peripheral.wrap("back")
local peripheralNames = Modem.getNamesRemote()
local monitorNamePattern = "monitor"
local equipmentNamePattern = "furnace"
local generatorNamePattern = "generator"



--Function to draw the progress bar
local function drawProgressBar(percent)
  local progressBarHeight = math.floor(height * (percent / 100)) -- Calculate height of progress bar
  monitor.setBackgroundColor(barColor) -- Set background color to blue
  for y = height, height - progressBarHeight +1, -1 do
      monitor.setCursorPos(5, y)
      monitor.write(string.rep(" ", 3)) -- Draw empty row to clear previous progress
  end
  monitor.setBackgroundColor(colors.black) -- Reset background color to black
  monitor.setCursorPos(5, height)
  monitor.write(" " .. tostring(math.floor(percent/100*64)))

end


--Function to draw the progress bar
local function drawBatteryBar(percent)
  local batteryBarHeight = math.floor(height * (percent / 100)) -- Calculate height of progress bar
  if percent > 25 then
    monitor.setBackgroundColor(colors.green) -- Set background color to blue
  else
    monitor.setBackgroundColor(colors.red) -- Set background color to blue
  end
  for y = height, height - batteryBarHeight +1, -1 do
      monitor.setCursorPos(1, y)
      monitor.write(string.rep(" ", 3)) -- Draw empty row to clear previous progress
  end
  monitor.setBackgroundColor(colors.black) -- Reset background color to black
  monitor.setCursorPos(1, height)
  monitor.write(tostring(math.floor(percent)) .. "%")
end


-- Function to write text vertically
local function writeTextVertically(x, y, text)
  for i = 1, #text do
      monitor.setCursorPos(x, y + i - 1)
      monitor.write(text:sub(i, i))
  end
end

-- Draw a red warning bar at the top of the monitor if generator.list()[1].count < 10
local function drawWarningBar()
  if equipment.getEnergy() < 5000 and equipment.getEnergy() > 500 then
    status = "warning"
    monitor.setBackgroundColor(colors.red) -- Set background color to red
    for y = 1, 3 do
        monitor.setCursorPos(1, y)
        monitor.write(string.rep(" ", width)) -- Draw empty row to clear previous warning
    end
    monitor.setBackgroundColor(colors.black) -- Reset background color to black
    local text = "Low"
    local textX = math.floor((width - #text) / 2) + 1 -- Calculate the x position to center the text
    monitor.setCursorPos(textX, 2)
    monitor.write(text)

  elseif equipment.getEnergy() < 500 then
    status = "warning"
    monitor.setBackgroundColor(colors.red) -- Set background color to red
    for y = 1, 3 do
        monitor.setCursorPos(1, y)
        monitor.write(string.rep(" ", width)) -- Draw empty row to clear previous warning
    end
    monitor.setBackgroundColor(colors.black) -- Reset background color to black
    local text = "Empty"
    local textX = math.floor((width - #text) / 2) + 1 -- Calculate the x position to center the text
    monitor.setCursorPos(textX, 2)
    monitor.write(text)

  else
    status = "normal"
  end

end


while true do
  local success, equipmentList = pcall(equipment.list)

  if success then
      if equipmentList and next(equipmentList) ~= nil then
          -- Check if the first element is not nil
          if equipmentList[1] ~= nil then
              ItemCount = equipmentList[1].count
          else
              ItemCount = 0
          end
      else
          ItemCount = 0
      end
  else
      ItemCount = 0
  end

  percentage = ItemCount / 64 * 100

  -- Draw the progress bar
  monitor.clear()
  drawBatteryBar(equipment.getEnergy()/50000*100)
  drawProgressBar(percentage)


  sleep(0.1)
  drawWarningBar()
  sleep(0.1)
  -- You can adjust the sleep time to control the refresh rate
end

